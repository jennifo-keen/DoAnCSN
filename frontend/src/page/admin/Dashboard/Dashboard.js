import React, { useState, useEffect } from "react";
import "./Dashboard.scss";
import AdminEditProduct from "../component/EditProduct/AdminEditProduct";

const AdminProductList = () => {
  const [products, setProducts] = useState([]);
  const [editProduct, setEditProduct] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const perPage = 4;

  const [newProduct, setNewProduct] = useState({
    name: "",
    description: "",
    price: "",
<<<<<<< HEAD
    stock_quantity: "",
=======
    stock: "",
>>>>>>> ad613c645a1e5aa79626dabeeb46f7142289713b
    category_id: "",
    image_url: "",
  });

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = () => {
    fetch("http://localhost:5000/api/products")
      .then((res) => res.json())
      .then((data) => setProducts(data))
      .catch((err) => console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", err));
  };

  const totalPages = Math.ceil(products.length / perPage);
  const start = (currentPage - 1) * perPage;
  const displayedProducts = products.slice(start, start + perPage);

  const handleDeleteProduct = async (productId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
      try {
        const res = await fetch(`http://localhost:5000/api/products/${productId}`, {
          method: "DELETE",
        });
        const data = await res.json();
        alert(data.message);
        fetchProducts();
      } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
      }
    }
  };

  const handleEditProduct = (product) => {
    setEditProduct(product);
  };

  const handleAddProduct = async (e) => {
    e.preventDefault();

    try {
      const res = await fetch("http://localhost:5000/api/products", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newProduct),
      });
      const data = await res.json();
      alert(data.message);
      fetchProducts();
<<<<<<< HEAD
      setNewProduct({ name: "", description: "", price: "", stock_quantity: "", category_id: "", image_url: "" });
=======
      setNewProduct({ name: "", description: "", price: "", stock: "", category_id: "", image_url: "" });
>>>>>>> ad613c645a1e5aa79626dabeeb46f7142289713b
    } catch (error) {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    }
  };

  return (
    <div className="admincontainer">
      <div className="admin-menu">
        <h2>Nh√¢n Vi√™n</h2>
        <a href="/admin">üë§ Admin</a>
        <a href="/logout">‚ùï ƒêƒÉng xu·∫•t</a>

        <h2>T·ªïng Quan</h2>
        <a href="/admin/orderlist">üõí Th·ªëng k√™ ƒë∆°n h√†ng</a>

        <h2>Ch·ª©c NƒÉng</h2>
        <a href="/admin/products">üõçÔ∏è Danh s√°ch s·∫£n ph·∫©m</a>
      </div>

      <div className="admin-content">
        <h2>Danh S√°ch S·∫£n Ph·∫©m</h2>

        {/* Form th√™m s·∫£n ph·∫©m */}
        <div className="add-product-form">
          <h3>Th√™m S·∫£n Ph·∫©m M·ªõi</h3>
          <form onSubmit={handleAddProduct}>
            <input type="text" placeholder="T√™n s·∫£n ph·∫©m" value={newProduct.name} onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })} required />
            <input type="text" placeholder="M√¥ t·∫£" value={newProduct.description} onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })} />
            <input type="number" placeholder="Gi√°" value={newProduct.price} onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })} required />
<<<<<<< HEAD
            <input type="number" placeholder="S·ªë l∆∞·ª£ng" value={newProduct.stock_quantity} onChange={(e) => setNewProduct({ ...newProduct, stock_quantity: e.target.value })} required />
=======
            <input type="number" placeholder="S·ªë l∆∞·ª£ng" value={newProduct.stock} onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })} required />
>>>>>>> ad613c645a1e5aa79626dabeeb46f7142289713b
            <input type="number" placeholder="ID danh m·ª•c" value={newProduct.category_id} onChange={(e) => setNewProduct({ ...newProduct, category_id: e.target.value })} required />
            <input type="text" placeholder="URL h√¨nh ·∫£nh" value={newProduct.image_url} onChange={(e) => setNewProduct({ ...newProduct, image_url: e.target.value })} />
            <button type="submit">Th√™m s·∫£n ph·∫©m</button>
          </form>
        </div>

        {/* B·∫£ng danh s√°ch s·∫£n ph·∫©m */}
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>T√™n</th>
              <th>Gi√°</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>Danh m·ª•c</th>
              <th>·∫¢nh</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {displayedProducts.map((product) => (
              <tr key={product.product_id}>
                <td>{product.product_id}</td>
                <td>{product.name}</td>
                <td>{product.price.toLocaleString()} VND</td>
<<<<<<< HEAD
                <td>{product.stock_quantity}</td>
=======
                <td>{product.stock}</td>
>>>>>>> ad613c645a1e5aa79626dabeeb46f7142289713b
                <td>{product.category_id}</td>
                <td>
                  <img src={product.image_url} alt={product.name} />
                </td>
                <td>
                  <button onClick={() => handleEditProduct(product)}>S·ª≠a</button>
                  <button className="delete-btn" onClick={() => handleDeleteProduct(product.product_id)}>X√≥a</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Ph√¢n trang */}
        <div className="pagination">
          {Array.from({ length: totalPages }, (_, i) => (
            <button key={i} className={currentPage === i + 1 ? "active" : ""} onClick={() => setCurrentPage(i + 1)}>
              {i + 1}
            </button>
          ))}
        </div>
      </div>

      {/* Form ch·ªânh s·ª≠a s·∫£n ph·∫©m */}
      {editProduct && (
        <AdminEditProduct
          product={editProduct}
          onClose={() => setEditProduct(null)}
          onSave={async (updatedProduct) => {
            try {
              const res = await fetch(`http://localhost:5000/api/products/${updatedProduct.product_id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedProduct),
              });
              const data = await res.json();
              alert(data.message);
              fetchProducts();
              setEditProduct(null);
            } catch (error) {
              console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
            }
          }}
        />
      )}
    </div>
  );
};

export default AdminProductList;
